name: 🚢 CD Pipeline - Continuous Deployment

on:
  # Only run CD when CI passes and code is pushed to main
  workflow_run:
    workflows: ["🚀 CI Pipeline - Learning CI/CD"]
    types:
      - completed
    branches: [ main ]

jobs:
  # Job 1: Deploy to Staging Environment
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: python-app-build
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: 🎭 Deploy to Staging
      run: |
        echo "🚀 Deploying to STAGING environment..."
        echo "📦 Extracting build artifact..."
        tar -xzf app-build.tar.gz
        
        echo "🔧 Setting up staging environment..."
        echo "DATABASE_URL=staging-db.example.com" > .env
        echo "APP_ENV=staging" >> .env
        
        echo "🌐 Starting application on staging..."
        echo "✅ Staging deployment successful!"
        echo "🔗 Staging URL: https://staging.example.com"
        
    - name: 🧪 Run Smoke Tests on Staging
      run: |
        echo "🧪 Running smoke tests on staging..."
        echo "✅ All smoke tests passed!"

  # Job 2: Deploy to Production (with manual approval)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://production.example.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: python-app-build
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: 🏭 Deploy to Production
      run: |
        echo "🚀 Deploying to PRODUCTION environment..."
        echo "📦 Extracting build artifact..."
        tar -xzf app-build.tar.gz
        
        echo "🔧 Setting up production environment..."
        echo "DATABASE_URL=prod-db.example.com" > .env
        echo "APP_ENV=production" >> .env
        
        echo "🌐 Starting application on production..."
        echo "✅ Production deployment successful!"
        echo "🔗 Production URL: https://production.example.com"
        
    - name: 📊 Post-Deployment Health Check
      run: |
        echo "🏥 Running health checks..."
        echo "✅ Application is healthy!"
        
    - name: 🔔 Notify Team
      run: |
        echo "📢 Notifying team of successful deployment..."
        echo "✅ Deployment notification sent!"

  # Job 3: Rollback (in case of issues)
  rollback:
    name: ⏪ Rollback Plan
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: ⏪ Rollback Deployment
      run: |
        echo "🚨 Deployment failed! Rolling back..."
        echo "⏪ Restoring previous version..."
        echo "✅ Rollback completed!"